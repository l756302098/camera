// Generated by gencpp from file fixed_msg/cp_controlRequest.msg
// DO NOT EDIT!


#ifndef FIXED_MSG_MESSAGE_CP_CONTROLREQUEST_H
#define FIXED_MSG_MESSAGE_CP_CONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixed_msg
{
template <class ContainerAllocator>
struct cp_controlRequest_
{
  typedef cp_controlRequest_<ContainerAllocator> Type;

  cp_controlRequest_()
    : id(0)
    , action(0)
    , type(0)
    , value(0)
    , allvalue()  {
    }
  cp_controlRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , action(0)
    , type(0)
    , value(0)
    , allvalue(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _action_type;
  _action_type action;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _value_type;
  _value_type value;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _allvalue_type;
  _allvalue_type allvalue;





  typedef boost::shared_ptr< ::fixed_msg::cp_controlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixed_msg::cp_controlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cp_controlRequest_

typedef ::fixed_msg::cp_controlRequest_<std::allocator<void> > cp_controlRequest;

typedef boost::shared_ptr< ::fixed_msg::cp_controlRequest > cp_controlRequestPtr;
typedef boost::shared_ptr< ::fixed_msg::cp_controlRequest const> cp_controlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixed_msg::cp_controlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixed_msg::cp_controlRequest_<ContainerAllocator1> & lhs, const ::fixed_msg::cp_controlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.action == rhs.action &&
    lhs.type == rhs.type &&
    lhs.value == rhs.value &&
    lhs.allvalue == rhs.allvalue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixed_msg::cp_controlRequest_<ContainerAllocator1> & lhs, const ::fixed_msg::cp_controlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixed_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixed_msg::cp_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_msg::cp_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_msg::cp_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f4a871c20539fe0b620048c32bb5406";
  }

  static const char* value(const ::fixed_msg::cp_controlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f4a871c20539fe0ULL;
  static const uint64_t static_value2 = 0xb620048c32bb5406ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixed_msg/cp_controlRequest";
  }

  static const char* value(const ::fixed_msg::cp_controlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 action\n"
"int32 type\n"
"int32 value\n"
"uint32[] allvalue\n"
;
  }

  static const char* value(const ::fixed_msg::cp_controlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.action);
      stream.next(m.type);
      stream.next(m.value);
      stream.next(m.allvalue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cp_controlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixed_msg::cp_controlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixed_msg::cp_controlRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
    s << indent << "allvalue[]" << std::endl;
    for (size_t i = 0; i < v.allvalue.size(); ++i)
    {
      s << indent << "  allvalue[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.allvalue[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXED_MSG_MESSAGE_CP_CONTROLREQUEST_H
