# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixed_msg/sync_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sync_data(genpy.Message):
  _md5sum = "7bc7618cef60033e2d78462cb5d33ffd"
  _type = "fixed_msg/sync_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string stamp
uint8 version
uint8 device_id
float32 pos_x
float32 pos_y
float32 pos_z
float32 qua_x
float32 qua_y
float32 qua_z
float32 qua_w
int32 horizontal
int32 vertical
uint8[] temperature
string v_format
uint8[] v_data"""
  __slots__ = ['stamp','version','device_id','pos_x','pos_y','pos_z','qua_x','qua_y','qua_z','qua_w','horizontal','vertical','temperature','v_format','v_data']
  _slot_types = ['string','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','int32','int32','uint8[]','string','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,version,device_id,pos_x,pos_y,pos_z,qua_x,qua_y,qua_z,qua_w,horizontal,vertical,temperature,v_format,v_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sync_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = ''
      if self.version is None:
        self.version = 0
      if self.device_id is None:
        self.device_id = 0
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.qua_x is None:
        self.qua_x = 0.
      if self.qua_y is None:
        self.qua_y = 0.
      if self.qua_z is None:
        self.qua_z = 0.
      if self.qua_w is None:
        self.qua_w = 0.
      if self.horizontal is None:
        self.horizontal = 0
      if self.vertical is None:
        self.vertical = 0
      if self.temperature is None:
        self.temperature = b''
      if self.v_format is None:
        self.v_format = ''
      if self.v_data is None:
        self.v_data = b''
    else:
      self.stamp = ''
      self.version = 0
      self.device_id = 0
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.qua_x = 0.
      self.qua_y = 0.
      self.qua_z = 0.
      self.qua_w = 0.
      self.horizontal = 0
      self.vertical = 0
      self.temperature = b''
      self.v_format = ''
      self.v_data = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B7f2i().pack(_x.version, _x.device_id, _x.pos_x, _x.pos_y, _x.pos_z, _x.qua_x, _x.qua_y, _x.qua_z, _x.qua_w, _x.horizontal, _x.vertical))
      _x = self.temperature
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.v_format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.v_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stamp = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.version, _x.device_id, _x.pos_x, _x.pos_y, _x.pos_z, _x.qua_x, _x.qua_y, _x.qua_z, _x.qua_w, _x.horizontal, _x.vertical,) = _get_struct_2B7f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.temperature = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.v_format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.v_format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.v_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B7f2i().pack(_x.version, _x.device_id, _x.pos_x, _x.pos_y, _x.pos_z, _x.qua_x, _x.qua_y, _x.qua_z, _x.qua_w, _x.horizontal, _x.vertical))
      _x = self.temperature
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.v_format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.v_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stamp = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.version, _x.device_id, _x.pos_x, _x.pos_y, _x.pos_z, _x.qua_x, _x.qua_y, _x.qua_z, _x.qua_w, _x.horizontal, _x.vertical,) = _get_struct_2B7f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.temperature = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.v_format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.v_format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.v_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B7f2i = None
def _get_struct_2B7f2i():
    global _struct_2B7f2i
    if _struct_2B7f2i is None:
        _struct_2B7f2i = struct.Struct("<2B7f2i")
    return _struct_2B7f2i
